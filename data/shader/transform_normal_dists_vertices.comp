#version 430

layout (local_size_x = 32, local_size_y = 1, local_size_z = 1) in;

uniform int num_means;
uniform int num_sphere_vertices;
uniform float scale;

layout(std430, binding=0) readonly buffer SphereVertices {
  vec4[] sphere_vertices;
};

layout(std430, binding=1) readonly buffer InputPoints {
  vec4[] means;
};

layout(std430, binding=2) readonly buffer InputCovs {
  mat4[] covs;
};

layout(std430, binding=3) writeonly buffer OutputPoints {
  vec4[] points_out;
};

void main() {
  uint i = gl_GlobalInvocationID.x;
  if (i > num_means * num_sphere_vertices) {
    return;
  }

  uint mean_id = i / num_sphere_vertices;
  uint vertex_id = i - mean_id * num_sphere_vertices;

  vec3 vertex = sphere_vertices[vertex_id].xyz;
  vec3 trans = means[mean_id].xyz;
  mat3 linear = scale * mat3(covs[mean_id]);

  vec3 transformed = linear * vertex + trans;

  points_out[i] = vec4(transformed, 1.0);
}